include("signalparam.jl")
include("filters.jl")
include("signals.jl")
include("quantize.jl")
include("lti.jl")
include("interpolation.jl")
include("conv.jl")
include("dft.jl")
include("polyfunctions.jl")

begin

    function zadanie1(; order::Int = 30, fp::Float64 = 192.0, f0::Float64 = 49.92, z::Vector{Int} = [1, 10, 1, 19, 21])
        h = fgp(order, f0 / fp)                            # filtr: 31 próbek
        w = hanning(Int(order ÷ 2))                        # okno: też 31 próbek (M=15)
        h = h .* w                                         # zastosowanie okna
        h_z = [h[i] for i in z]                            # indeksowanie (zakładamy że i w z <= 31)
        return sum(h_z)
    end

    function zadanie18(; #fpp i hamming 
    order::Int = 38,
    fp::Float64 = 190.0,
    f1::Float64 = 37.05,
    f2::Float64 = 69.35,
    z::Vector{Int} = [15, 17, 11, 19, 25, 13],
    )
        h=fpp(order,f1/fp,f2/fp)
        w= hamming(Int(order÷2))
        h=h.*w
        h_z= [h[i] for i in z]
        return sum(h_z)
    end 
    function zadanie33(;
        order::Int = 30,
        fp::Float64 = 199.0,
        f0::Float64 = 61.69,
        z::Vector{Int} = [3, 9, 25, 10, 3, 18],
    )
        h=fgp(order,f0/fp)
        w=hamming(Int(order÷2))
        h=h.*w
        h_z= [h[i] for i in z]
        return sum(h_z)
    end
    function zadanie44(;
    order::Int = 80,
    fp::Float64 = 196.0,
    f1::Float64 = 64.68,
    f2::Float64 = 80.36,
    z::Vector{Int} = [7, 10, 13, 47],
    )
        h=fbz(order,f1/fp,f2/fp)
        w=triang(Int(order÷2))
        h=h.*w
        h_z=[h[i] for i in z]
        return sum(h_z)
    end
    function zadanie50(;
    order::Int = 52,
    fp::Float64 = 191.0,
    f0::Float64 = 82.13,
    z::Vector{Int} = [31, 22, 39, 34, 44, 34],
    )
        h=fgp(order,f0/fp)
        w=hamming(Int(order÷2))
        h=h.*w
        hsum=[h[i] for i in z]
        return sum(hsum)
    end
    function zadanie2(; #kwantyzacja
        a::Float64 = -0.86,
        b::Float64 = 1.9,
        x::Vector{Float64} = [1.904, 1.85369, 1.80338, 1.75307, 1.70276, 1.65245, 1.60214, 1.55183, 1.50152, 1.4512, 1.40089, 1.35058, 1.30027, 1.24996, 1.19965, 1.14934, 1.09903, 1.04872, 0.99841, 0.9481, 0.89779, 0.84748, 0.79717, 0.74686, 0.69655, 0.64624, 0.59593, 0.54561, 0.4953, 0.44499, 0.39468, 0.34437, 0.29406, 0.24375, 0.19344, 0.14313, 0.09282, 0.04251, -0.0078, -0.05811, -0.10842, -0.15873, -0.20904, -0.25935, -0.30966, -0.35998, -0.41029, -0.4606, -0.51091, -0.56122, -0.61153, -0.66184, -0.71215, -0.76246, -0.81277, -0.86308],
        )
    
        N=8
        L=range(; start=a, stop=b, length=2^N)
        q=quantize(L)
        xq=q.(x)
        qerror=x .- xq
        return energy(qerror)
    end
    function zadanie5(;
        a::Float64 = -1.8,
        b::Float64 = -0.7,
        x::Vector{Float64} = [-0.95249, -0.93229, -0.9067, -0.8895, -0.87555, -0.85029, -0.8252, -0.81458, -0.79834, -0.76341, -0.74406, -0.75505, -0.71527, -1.78174, -1.6715, -1.63665, -1.63797, -1.6205, -1.58786, -1.56999, -1.55878, -1.53492, -1.50956, -1.49477, -1.47799, -1.45289, -1.43215, -1.41732, -1.39668, -1.3726, -1.35497, -1.33838, -1.31541, -1.29361, -1.27749, -1.25832, -1.23467, -1.21556, -1.19928, -1.17752, -1.15483, -1.13799, -1.12006, -1.0965, -1.07607, -1.06039, -1.03973, -1.0158, -0.99839, -0.98217, -0.95838, -0.93601, -0.92165, -0.90273, -0.87615, -0.85783, -0.84582, -0.82103, -0.79271, -0.78345, -0.77255, -0.72953, -0.69845, -1.009, -1.65916, -1.68134, -1.64381, -1.61209, -1.60441, -1.58885, -1.55944, -1.5393, -1.52701, -1.50512, -1.47973, -1.46346, -1.44731, -1.42317, -1.40151, -1.38622, -1.36657, -1.34251, -1.32397, -1.30773, -1.28547, -1.26305, -1.2465, -1.2281, -1.20456],
        )
            N=6
            L=range(; start=a, stop=b, length=2^N)
            q=quantize(L)
            xq=q.(x)
            qerror=x.-xq
            return power(qerror)
    end
    function zadanie6(;
        a::Float64 = -0.67,
        b::Float64 = 0.28,
        x::Vector{Float64} = [0.03, -0.03279, -0.09557, -0.15836, -0.22115, -0.28394, -0.34672, -0.40951, -0.4723, -0.53508, -0.59787, -0.66066, 0.27655, 0.21377, 0.15098, 0.08819, 0.02541, -0.03738, -0.10017, -0.16296, -0.22574, -0.28853, -0.35132, -0.4141, -0.47689, -0.53968, -0.60247, -0.66525, 0.27196, 0.20917, 0.14639, 0.0836, 0.02081, -0.04198, -0.10476, -0.16755, -0.23034, -0.29312, -0.35591, -0.4187, -0.48149, -0.54427, -0.60706, -0.66985, 0.26737, 0.20458, 0.14179, 0.079, 0.01622, -0.04657, -0.10936, -0.17214, -0.23493, -0.29772, -0.36051, -0.42329, -0.48608, -0.54887, -0.61165, -0.67444, 0.26277, 0.19998],
        )
        N=8
        L=range(;start=a, stop=b, length= 2^N)
        q=quantize(L)
        xq=q.(x)
        qerror=x.-xq
        return power(qerror)
    end
    function zadanie16(;
        a::Float64 = -1.8,
        b::Float64 = 0.96,
        x::Vector{Float64} = [-0.176, -0.55802, -0.94003, -1.32205, -1.70406, -1.51392, -1.13191, -0.74989, -0.36788, 0.01414, 0.39616, 0.77817, 0.83981, 0.4578, 0.07578, -0.30623, -0.68825, -1.07026, -1.45228, -1.76571, -1.38369, -1.00167, -0.61966, -0.23764, 0.14437, 0.52639, 0.9084, 0.70958, 0.32757, -0.05445, -0.43647, -0.81848, -1.2005, -1.58251, -1.63547, -1.25346, -0.87144, -0.48943, -0.10741, 0.2746, 0.65662, 0.96136, 0.57935, 0.19733, -0.18468, -0.5667, -0.94871, -1.33073, -1.71274, -1.50524, -1.12322, -0.74121, -0.35919, 0.02282, 0.40484, 0.78685, 0.83113, 0.44912, 0.0671, -0.31491, -0.69693, -1.07895, -1.46096, -1.75702, -1.37501, -0.99299, -0.61098, -0.22896, 0.15305, 0.53507, 0.91709, 0.7009, 0.31888, -0.06313, -0.44515, -0.82716, -1.20918, -1.59119, -1.62679, -1.24478, -0.86276, -0.48074],
        )
        
        N=5
        L=range(; start=a, stop =b, length=2^N)
        q=quantize(L)
        xq=q.(x)
        qerror=x.-xq
        return rms(qerror)
    end
    function zadanie17(;
        a::Float64 = 1.9,
        b::Float64 = 2.5,
        x::Vector{Float64} = [2.416, 2.36717, 2.31835, 2.26952, 2.22069, 2.17187, 2.12304, 2.07422, 2.02539, 1.97656, 1.92774, 1.92109, 1.96992, 2.01874, 2.06757, 2.11639, 2.16522, 2.21405, 2.26287, 2.3117, 2.36053, 2.40935, 2.45818, 2.493, 2.44417, 2.39534, 2.34652, 2.29769, 2.24886, 2.20004, 2.15121, 2.10238, 2.05356, 2.00473, 1.95591, 1.90708, 1.94175, 1.99057, 2.0394, 2.08823, 2.13705, 2.18588, 2.2347, 2.28353, 2.33236, 2.38118, 2.43001, 2.47884, 2.47234, 2.42351, 2.37469, 2.32586, 2.27703, 2.22821, 2.17938, 2.13055, 2.08173, 2.0329, 1.98408, 1.93525, 1.91358, 1.9624, 2.01123, 2.06006, 2.10888, 2.15771, 2.20654, 2.25536, 2.30419, 2.35301, 2.40184, 2.45067, 2.49949, 2.45168, 2.40285, 2.35403, 2.3052, 2.25638, 2.20755, 2.15872, 2.1099, 2.06107, 2.01224, 1.96342, 1.91459, 1.93423, 1.98306, 2.03189, 2.08071, 2.12954, 2.17837, 2.22719, 2.27602, 2.32485, 2.37367, 2.4225],
        )
        
        N=10
        L=range(; start=a, stop=b, length=2^N)
        q=quantize(L)
        xq=q.(x)
        qerror=x.-xq
        return power(qerror)
    end
    function zadanie22(;
        a::Float64 = -0.4,
        b::Float64 = 4.8,
        x::Vector{Float64} = [-0.4, -0.0858, 0.2284, 0.5426, 0.8568, 1.171, 1.4852, 1.7994, 2.1136, 2.42779, 2.74199, 3.05619, 3.37039, 3.68459, 3.99879, 4.31299, 4.62719, -0.25861, 0.05559, 0.36979, 0.68399, 0.99819, 1.31239, 1.62659, 1.94079, 2.25498, 2.56918, 2.88338, 3.19758, 3.51178, 3.82598, 4.14018, 4.45438, 4.76858, -0.11722, 0.19698, 0.51118, 0.82538, 1.13958, 1.45378, 1.76798, 2.08218, 2.39637, 2.71057, 3.02477, 3.33897, 3.65317, 3.96737, 4.28157, 4.59577, -0.29003, 0.02417, 0.33837, 0.65257, 0.96677, 1.28097, 1.59517, 1.90937, 2.22356, 2.53776, 2.85196, 3.16616, 3.48036, 3.79456, 4.10876, 4.42296, 4.73716, -0.14864, 0.16556, 0.47976, 0.79396, 1.10816, 1.42236, 1.73656, 2.05076, 2.36495],
        )
        N=3
        L=range(;start =a, stop=b, length=2^N)
        q=quantize(L)
        xq=q.(x)
        qerror=x.-xq
        return power(qerror)
    end
    function zadanie47(;
        a::Float64 = -6.7,
        b::Float64 = 3.4,
        x::Vector{Float64} = [-5.85607, -5.46519, -5.10337, -4.75532, -4.4161, -4.08325, -3.75498, -3.4297, -3.1059, -2.78214, -2.45709, -2.12967, -1.79907, -1.4648, -1.12678, -0.78529, -0.44097, -0.09478, 0.25209, 0.59828, 0.94236, 1.2829, 1.61845, 1.94745, 2.26781, 2.57551, 2.85886, 3.05947, -0.54603, -5.82278, -5.62567, -5.34813, -5.04794, -4.7362, -4.41627, -4.08956, -3.75697, -3.4194, -3.07785, -2.7335, -2.38764, -2.04158, -1.69661, -1.35384, -1.01415, -0.67811, -0.34592, -0.01741, 0.30796, 0.63109, 0.95316, 1.27555, 1.59986, 1.92787, 2.26184, 2.60554, 2.96917, 3.41341, -6.71216, -6.17888, -5.7842, -5.41367, -5.0506, -4.69173, -4.3366, -3.98549, -3.63878, -3.29672, -2.95926, -2.62605, -2.29641, -1.9694, -1.64388, -1.3186, -0.9923, -0.66381, -0.33217, 0.00331, 0.34299],
        )
        N=3
        L=range(; start =a, stop =b, length = 2^N)
        q=quantize(L)
        xq=q.(x)
        qerror=x.-xq
        return energy(qerror)
    end
    function zadanie12(;
        b::Vector{Float64} = [0.007565859165903106, -0.002964141329207259, 0.0069809764063194215, 0.006980976406319421, -0.0029641413292072604, 0.007565859165903106],
        a::Vector{Float64} = [1.0, -3.2777960554763252, 4.5105514453523154, -3.20299624965813, 1.1669195812770186, -0.17351333300884755],
        x::Vector{Float64} = [-0.16, 0.8, 0.92, 0.18, -0.43, 0.99, 0.46, 0.8, -0.38, 0.46, -0.38, -0.49, 0.42, -0.58, -0.7, 0.41, -0.92, 0.84, -0.57, 0.89, 0.04, 0.33, 0.29, -0.83, 0.35, -0.03, 0.74],
        L::Int = 77,
        )

        N=length(x)
        xp=vcat(x,zeros(Float64,L-N))
        y=ltifilter(b,a,xp)
        return mean(y)

    end
    function zadanie23(;
        b::Vector{Float64} = [0.0025850641842372754, 0.015510385105423652, 0.03877596276355913, 0.05170128368474551, 0.03877596276355913, 0.015510385105423652, 0.0025850641842372754],
        a::Vector{Float64} = [1.0, -2.379721044554775, 2.9104065678646873, -2.055131436773098, 0.8779238976340888, -0.2098654503596897, 0.02183157397997185],
        x::Vector{Float64} = [0.78, 0.55, 0.15, 0.99, 0.99, 0.24, 0.63, 0.73, -0.78, 0.08, 0.65, -0.98, 0.81, -0.64, -0.84, -0.75, 0.94, -0.04, -0.2, 0.66, -0.21, -0.98],
        L::Int = 43,
        )

        N=length(x)
        xp=vcat(x,zeros(Float64,L-N))
        y=ltifilter(b,a,xp)
        return rms(y)

    end
    function zadanie34(;
        b::Vector{Float64} = [0.4419376000325761, -1.558586615714086, 3.1443562142337984, -3.818929149200471, 3.144356214233798, -1.5585866157140862, 0.4419376000325761],
        a::Vector{Float64} = [1.0, -2.6146370671909045, 3.7694389019755006, -3.4513490882169577, 2.2090568436223847, -0.8701162252207815, 0.1940918829348649],
        x::Vector{Float64} = [-0.62, -0.64, 0.03, 0.49, 0.44, -0.06, 0.33, -0.11, -0.39, -0.24, 0.2, 0.93, 0.54, -0.97, 0.22, -0.85, 0.64, -0.69, -0.36, 0.63, -0.01, 0.68, -0.68, -0.87, -0.47, -0.59, -0.95, 0.57, 0.75, 0.22, 0.14, -0.56, -0.09],
        L::Int = 43,
        )
        
        N=length(x)
        xp=vcat(x,zeros(Float64,L-N))
        y=ltifilter(b,a,xp)
        return power(y)
    end
    function zadanie51(;
        b::Vector{Float64} = [0.13765452052178545, -0.8259271231307127, 2.0648178078267816, -2.753090410435709, 2.0648178078267816, -0.8259271231307127, 0.13765452052178545],
        a::Vector{Float64} = [1.0, -2.2602004426555764, 2.699835625087775, -1.8632667209677467, 0.7832025354037867, -0.18442602402918318, 0.018957965250203487],
        x::Vector{Float64} = [-1.0, 0.24, -0.82, 0.75, 0.85, 0.32, -0.39, 0.52, 0.49, 0.02, -0.01, -0.77, 0.86, -0.12, -0.31, 0.28, -0.17, 0.86, -0.2, 0.32],
        L::Int = 31,
        )
        
        N=length(x)
        xp=vcat(x,zeros(Float64,L-N))
        y=ltifilter(b,a,xp)
        return energy(y)
    end
    function zadanie52(;
            b::Vector{Float64} = [0.2860349839875222, -1.4072263983896438, 3.7403513880225163, -6.350473163087442, 7.563206382127592, -6.3504731630874405, 3.7403513880225154, -1.4072263983896436, 0.2860349839875221],
            a::Vector{Float64} = [1.0, -3.7055535172065373, 7.365014864472611, -9.784104450598761, 9.536587675832035, -6.913757048058372, 3.8024010102028436, -1.5126687651160444, 0.35415326122131824],
            x::Vector{Float64} = [0.88, -0.17, -0.59, 0.24, 0.45, 0.24, 0.72, 0.61, 0.18, 0.25, 0.09, -0.13, -0.25, 0.65, -0.05, -0.1, -0.51, 0.3, 0.03, -0.86],
            L::Int = 38,
            )
        
            N=length(x)
            xp=vcat(x,zeros(Float64,L-N))
            y=ltifilter(b,a,xp)
            return energy(y)
    end
    function zadanie54(;
        b::Vector{Float64} = [0.35298906219757203, -1.5029543299486194, 4.244802701055701, -7.98568860641915, 11.724259787937788, -13.076031142144508, 11.72425978793779, -7.98568860641915, 4.2448027010557015, -1.5029543299486194, 0.3529890621975721],
        a::Vector{Float64} = [1.0, -3.4015571371053914, 7.473704173229628, -11.18917360406491, 13.159821737868203, -11.9215302033898, 8.729094707146523, -4.903823310324632, 2.156886570610334, -0.6372327599953104, 0.1245959135274243],
        F::Vector{Float64} = [0.01, 0.11, 0.16, 0.18, 0.27, 0.39],
        )
        ku=[ltiamp(f,b,a) for f in F]
        return mean(ku)
    end
    function zadanie11(;
        b::Vector{Float64} = [0.4350720967813647, -2.2364422441016516, 7.400514067760954, -16.653968746894723, 29.202281485025942, -39.9845603573371, 44.64572022913194, -39.98456035733711, 29.202281485025942, -16.653968746894723, 7.400514067760954, -2.2364422441016516, 0.4350720967813649],
        a::Vector{Float64} = [1.0, -4.677290890500987, 14.076613587445543, -28.980718357501033, 46.693538472670426, -59.1315595393033, 61.44876946986736, -51.633674846105976, 35.66966639802992, -19.439240482279565, 8.337203907174908, -2.463730820529054, 0.4727214507516522],
        F::Vector{Float64} = [0.13, 0.18, 0.21, 0.45],
        )
        ph=[ltiphase(f,b,a) for f in F]
        return mean(ph)
            
    end
    function zadanie53(;
        b::Vector{Float64} = [0.6943140684289035, -4.0317533052338845, 13.920736629352877, -32.74646021423268, 58.57092087170866, -81.61766160802392, 91.25952384976976, -81.61766160802392, 58.57092087170866, -32.746460214232656, 13.920736629352858, -4.0317533052338765, 0.6943140684289022],
        a::Vector{Float64} = [1.0, -5.454495427473779, 17.6776250786568, -39.060382822698756, 65.64774130361086, -86.01547571391846, 90.47652832159771, -76.17016706675828, 51.478823082707144, -27.122082803064067, 10.86867717655984, -2.969146421067879, 0.4820720256185417],
        F::Vector{Float64} = [0.4, 0.41, 0.48],
        )
        ku=[ltiamp(f,b,a) for f in F]
        return mean(ku)
    end
    function zadanie36(;
        b::Vector{Float64} = [0.22382351930333216, -0.6714705579099964, 0.6714705579099964, -0.22382351930333216],
        a::Vector{Float64} = [1.0, -0.43796058675527194, 0.5255572503713333, 0.1729296826999481],
        F::Vector{Float64} = [0.1, 0.2, 0.29],
        )
        ku=[ltiamp(f,b,a) for f in F]
        return mean(ku)
    end
    function zadanie26(;
        zz::Vector{ComplexF64} = ComplexF64[0.5573240189479631 + 0.8302950908584794im, 0.5573240189479631 - 0.8302950908584794im, 0.641581324097754 + 0.7670550205617409im, 0.641581324097754 - 0.7670550205617409im, 0.9108080811536637 + 0.41283003682530284im, 0.9108080811536637 - 0.41283003682530284im],
        pp::Vector{ComplexF64} = ComplexF64[0.4993874939184289 + 0.8547042526469697im, 0.4993874939184289 - 0.8547042526469697im, 0.38514534634437164 + 0.8504041966418185im, 0.38514534634437164 - 0.8504041966418185im, -0.13863455368506164 + 0.6174786541025186im, -0.13863455368506164 - 0.6174786541025186im],
        k::Float64 = 0.1601205008772371,
        F::Vector{Float64} = [0.1, 0.1, 0.31, 0.44],
        )
        a=polyfromroots(pp)
        b=polyfromroots(zz).*k
        A=[ltiphase(f,b,a) for f in F]
        return mean(A)
    end
    #sygnały 
    function zadanie3(;
        fp::Float64 = 441.89,
        t1::Float64 = 5.63,
        N::Int = 428,
        )
        
        g=triangularwave
        t=range(; start=t1, step=(1/fp), length=N)
        y=1.2*g.(3.4.*t.-1.5)
        return mean(y)

    end
    function zadanie4(;
        fp::Float64 = 219.95,
        t1::Float64 = -7.63,
        N::Int = 125,
        )
        g=squarewave
        t=range(; start=t1, step=(1/fp), length =N)
        y=0.5*g.(4.9.*t.-3.6)
        return mean(y)
    end
    function zadanie7(;
        fp::Float64 = 476.14,
        t1::Float64 = 5.65,
        N::Int = 676,
        )
        g=sawtoothwave
        t=range(;start=t1,step=(1/fp),length=N)
        y=0.4*g.(3.8.*t.-0.4)
        return mean(y)
    end
    function zadanie8(;
        fp::Float64 = 445.28,
        t1::Float64 = 1.84,
        N::Int = 774,
        )
        g=sawtoothwave
        t=range(; start=t1, step=(1/fp), length = N)
        y=1.2*g.(1.8.*t.-4.4)
        return mean(y)
    end
    function zadanie10(;
        fp::Float64 = 468.7,
        t1::Float64 = -5.99,
        N::Int = 733,
        )
        g=squarewave
        t=range(; start=t1, step=(1/fp), length =N)
        y=1.6*g.(4.3.*t.-1.1)
        return mean(y)
    end
    function zadanie24(;
        fp::Float64 = 183.98,
        t1::Float64 = 8.28,
        N::Int = 424,
        )
        g=sawtoothwave
        t=range(; start=t1, step=(1/fp), length=N)
        y=1.4*g.(4.8.*t.-2.5)
        return mean(y)
    end
    function zadanie31(;
        fp::Float64 = 189.7,
        t1::Float64 = -0.1,
        N::Int = 632,
        )
        g=triangularwave
        t=range(; start=t1, step=(1/fp), length=N)
        y=2.2*g.(3.1.*t.-3.3)
        return mean(y)
    end
    function zadanie32(;
        fp::Float64 = 256.7,
        t1::Float64 = -2.27,
        N::Int = 935,
        )
        g=sawtoothwave
        t=range(; start=t1, step=(1/fp), length=N)
        y=4.6*g.(0.8.*t.-4.6)
        return mean(y)
    end
    function zadanie40(;
        fp::Float64 = 314.92,
        t1::Float64 = 2.72,
        N::Int = 389,
        )
        g=rampwave
        t=range(; start=t1, step=(1/fp), length=N)
        y=g.(3.8.*t.-1.7)
        return mean(y)
    end
    function zadanie14(;
        z::Vector{ComplexF64} = ComplexF64[1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im],
        p::Vector{ComplexF64} = ComplexF64[0.8522925660496932 - 0.4000755282309536im, 0.8522925660496932 + 0.4000755282309536im, 3.9163850758069665 - 3.108364190051813im, 0.4780265719941804 + 0.37940106744323937im],
        k::Float64 = 0.4657779560999565,
        )
        radii=abs.(p)
        if all(radii.<1)
            return 1.0
        elseif all(radii .<=1) && any(radii.==1)
            return 0.0
        else
            return -1.0
        end
        0.0
        semistable
    end
    function zadanie19(;
        z::Vector{ComplexF64} = ComplexF64[-1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im],
        p::Vector{ComplexF64} = ComplexF64[0.7429205203933382 + 0.6097063740523192im, 0.7429205203933382 - 0.6097063740523192im, 0.7765792268889944 + 0.4383315460045222im, 0.7765792268889944 - 0.4383315460045222im, 1.963095084652674 + 0.38243651579381127im, 0.8314626107691075 - 0.1619797565392117im],
        k::Float64 = 8.064245488475155e-5,
        )
        radii= abs.(p)
        if all(radii.<1)
            return 1.0
        elseif all(radii .<=1) && any(radii.=1)
            return 0.0
        else
            return -1.0
        end
    end
    function zadanie20(;
        z::Vector{ComplexF64} = ComplexF64[0.7536982546482641 + 0.6572206181642208im, 0.7536982546482641 - 0.6572206181642208im, 1.0 + 0.0im],
        p::Vector{ComplexF64} = ComplexF64[-0.849268917184576 + 1.8107297717506434im, -0.26227461361720433 - 0.5591967887220513im, -0.18151342191567185 + 0.0im],
        k::Float64 = 0.0999877997747182,
        )
        radii = abs.(p)
        if all(radii.<1)
            return 1.0
        elseif all(radii .<=1) && any(radii.=1)
            return 0.0 
        else 
            return -1.0
        end
    end
    #stabilność
    function zadanie21(;
        z::Vector{ComplexF64} = ComplexF64[1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im],
        p::Vector{ComplexF64} = ComplexF64[0.4020915353457984 - 0.6466229977354765im, 0.4020915353457984 + 0.6466229977354765im, 0.3000795455376084 - 0.2982462344784136im, 0.3000795455376084 + 0.2982462344784136im, 0.27356904308223723 - 0.0im],
        k::Float64 = 0.1688067906886211,
        )
        radii = abs.(p)
        if all(radii.<1)
            return 1.0
        elseif all(radii.<=1) && any(radii.=1)
            return 0.0
        else
            return -1.0
        end
    end
    function zadanie30(;
        z::Vector{ComplexF64} = ComplexF64[1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im],
        p::Vector{ComplexF64} = ComplexF64[0.3067437458214787 - 0.9134438158014485im, 0.3067437458214787 + 0.9134438158014485im, 0.13865891623216117 - 4.9980770007023025im, 0.02397538661163368 + 0.8642129310019667im, -0.5172242517216077 - 0.46948975979365626im, -0.5172242517216077 + 0.46948975979365626im],
        k::Float64 = 0.022893799811979896,
        )
        radii=abs.(p)
        if all(radii.<1)
            return 1.0
        elseif all(radii.<=1) && any(radii.=1)
            return 0.0
        else 
            return -1
        end
    end
    function zadanie37(;
        z::Vector{ComplexF64} = ComplexF64[0.8044032046527437 + 0.59408373512864im, 0.8044032046527437 - 0.59408373512864im, 0.8044032046527437 + 0.59408373512864im, 0.8044032046527437 - 0.59408373512864im, 0.8044032046527437 + 0.59408373512864im, 0.8044032046527437 - 0.59408373512864im, 0.8044032046527437 + 0.59408373512864im, 0.8044032046527437 - 0.59408373512864im],
        p::Vector{ComplexF64} = ComplexF64[0.6391447688754189 - 0.7354123807356372im, 0.8793872599001731 + 0.4429065304332173im, 0.6391447688754189 + 0.7354123807356372im, 0.8793872599001731 - 0.4429065304332173im, 0.3855174610561706 - 0.6495410308825647im, 0.8390002549433014 + 0.3060920132414612im, 0.3855174610561706 + 0.6495410308825647im, 0.8390002549433014 - 0.3060920132414612im],
        k::Float64 = 0.4586408765804243,
        )
        radii= abs.(p)
        if all(radii.<1)
            return 1
        elseif all(radii.<=1) && any(radii.=1)
            return 0
        else 
            return -1
        end
    end
    function zadanie55(;
        z::Vector{ComplexF64} = ComplexF64[0.6820815970748586 + 0.7312760729928267im, 0.6820815970748586 - 0.7312760729928267im, 0.9371815015523546 + 0.34884213212866627im, 0.9371815015523546 - 0.34884213212866627im],
        p::Vector{ComplexF64} = ComplexF64[-0.004443246769102389 + 0.6977543542665294im, -0.004443246769102389 - 0.6977543542665294im, 0.04092877936868938 + 0.2214748649623988im, 0.72689599059405 - 3.933398304120534im],
        k::Float64 = 0.12842979268538263,
        )
        radii=abs.(p)
        if all(radii.<1)
            return 1
        elseif all(radii.<=1) && any(radii.=1)
            return 0
        else 
            return -1
        end
    end
    #interpolacje
    function zadanie27(;
        m::Vector{Float64} = [-3.3, -3.2982, -3.2964, -3.2946, -3.2928, -3.291, -3.2892, -3.2874, -3.2856, -3.2838, -3.282, -3.2802, -3.2784, -3.2766, -3.2748, -3.273, -3.2712, -3.2694, -3.2676, -3.2658, -3.264, -3.2622, -3.2604, -3.2586, -3.2568, -3.255, -3.2532, -3.2514, -3.2496, -3.2478, -3.246, -3.2442, -3.2424, -3.2406, -3.2388, -3.237, -3.2352, -3.2334, -3.2316, -3.2298, -3.228, -3.2262, -3.2244, -3.2226, -3.2208, -3.219, -3.2172, -3.2154, -3.2136, -3.2118, -3.21, -3.2082, -3.2064, -3.2046, -3.2028, -3.201, -3.1992, -3.1974, -3.1956, -3.1938, -3.192, -3.1902, -3.1884, -3.1866, -3.1848, -3.183, -3.1812, -3.1794, -3.1776, -3.1758, -3.174, -3.1722, -3.1704, -3.1686, -3.1668, -3.165, -3.1632, -3.1614, -3.1596],
        s::Vector{Float64} = [0.0747, 0.9815, 0.653, 0.1859, 0.0116, 0.0243, 0.2003, 0.6202, 0.437, 0.9528, 0.1141, 0.6646, 0.5088, 0.2838, 0.537, 0.2902, 0.7457, 0.6294, 0.5413, 0.4436, 0.0118, 0.5973, 0.8362, 0.7109, 0.5837, 0.3987, 0.8476, 0.2811, 0.3408, 0.6457, 0.916, 0.851, 0.7156, 0.4896, 0.6452, 0.4568, 0.5927, 0.3266, 0.3423, 0.7247, 0.7912, 0.5317, 0.9405, 0.1062, 0.7414, 0.9233, 0.6376, 0.6547, 0.7075, 0.6388, 0.6049, 0.7293, 0.3063, 0.7653, 0.4085, 0.4251, 0.1623, 0.8847, 0.3044, 0.6296, 0.0711, 0.1133, 0.2291, 0.5799, 0.1268, 0.5773, 0.5575, 0.6568, 0.8397, 0.7529, 0.842, 0.1326, 0.6425, 0.5819, 0.2723, 0.7296, 0.0422, 0.2752, 0.8388],
        t::Vector{Float64} = [-3.21036, -3.1704, -3.19362, -3.25446, -3.25464, -3.2514, -3.2775, -3.18714, -3.23466, -3.16104, -3.1992, -3.20568, -3.29856],
        )
        g=interpolation(m,s)
        return sum(g.(t))
    end
    function zadanie35(;
        m::Vector{Float64} = [3.4, 3.4018, 3.4036, 3.4054, 3.4072, 3.409, 3.4108, 3.4126, 3.4144, 3.4162, 3.418, 3.4198, 3.4216, 3.4234, 3.4252, 3.427, 3.4288, 3.4306, 3.4324, 3.4342, 3.436, 3.4378, 3.4396, 3.4414, 3.4432, 3.445, 3.4468, 3.4486, 3.4504, 3.4522, 3.454, 3.4558, 3.4576, 3.4594, 3.4612, 3.463, 3.4648, 3.4666, 3.4684, 3.4702, 3.472, 3.4738, 3.4756, 3.4774, 3.4792, 3.481, 3.4828, 3.4846, 3.4864, 3.4882, 3.49, 3.4918, 3.4936, 3.4954, 3.4972, 3.499, 3.5008, 3.5026, 3.5044, 3.5062, 3.508, 3.5098, 3.5116, 3.5134, 3.5152, 3.517, 3.5188, 3.5206, 3.5224, 3.5242, 3.526, 3.5278, 3.5296, 3.5314, 3.5332, 3.535, 3.5368, 3.5386],
        s::Vector{Float64} = [0.6739, 0.5076, 0.4511, 0.6462, 0.4062, 0.5969, 0.7258, 0.4506, 0.5286, 0.0689, 0.6103, 0.6529, 0.3388, 0.7775, 0.679, 0.1797, 0.3635, 0.6839, 0.8835, 0.2509, 0.4329, 0.8919, 0.3477, 0.5465, 0.7918, 0.7924, 0.8046, 0.3713, 0.6383, 0.4364, 0.0118, 0.5844, 0.0775, 0.6899, 0.7006, 0.766, 0.6791, 0.0651, 0.5385, 0.7603, 0.217, 0.5566, 0.7225, 0.6094, 0.2165, 0.8629, 0.9075, 0.0544, 0.7906, 0.3067, 0.9995, 0.9039, 0.5504, 0.7984, 0.5704, 0.8431, 0.9197, 0.2511, 0.9753, 0.1503, 0.6378, 0.1678, 0.1862, 0.4441, 0.175, 0.1979, 0.2362, 0.6771, 0.3801, 0.377, 0.5606, 0.3834, 0.2807, 0.7479, 0.3297, 0.5981, 0.7087, 0.5836],
        t::Vector{Float64} = [3.53698, 3.52186, 3.4306, 3.4405, 3.51664, 3.41134, 3.52132, 3.4441, 3.43852, 3.49288, 3.43636, 3.44356, 3.44446],
        )
        g=interpolation(m,s)
        return sum(g.(t))
    end
    function zadanie38(;
        m::Vector{Float64} = [2.6, 2.6022, 2.6044, 2.6066, 2.6088, 2.611, 2.6132, 2.6154, 2.6176, 2.6198, 2.622, 2.6242, 2.6264, 2.6286, 2.6308, 2.633, 2.6352, 2.6374, 2.6396, 2.6418, 2.644, 2.6462, 2.6484, 2.6506, 2.6528, 2.655, 2.6572, 2.6594, 2.6616, 2.6638, 2.666, 2.6682, 2.6704, 2.6726, 2.6748, 2.677, 2.6792, 2.6814, 2.6836, 2.6858, 2.688, 2.6902, 2.6924, 2.6946, 2.6968, 2.699, 2.7012, 2.7034, 2.7056, 2.7078, 2.71, 2.7122, 2.7144, 2.7166, 2.7188, 2.721, 2.7232, 2.7254, 2.7276, 2.7298, 2.732, 2.7342, 2.7364, 2.7386, 2.7408, 2.743, 2.7452, 2.7474, 2.7496, 2.7518, 2.754, 2.7562, 2.7584, 2.7606, 2.7628, 2.765, 2.7672, 2.7694, 2.7716, 2.7738, 2.776],
        s::Vector{Float64} = [0.3646, 0.8543, 0.492, 0.3209, 0.8475, 0.3817, 0.9233, 0.9198, 0.0511, 0.1062, 0.6196, 0.8011, 0.1938, 0.3106, 0.7918, 0.8289, 0.2093, 0.8728, 0.3904, 0.8434, 0.0301, 0.5495, 0.5668, 0.6928, 0.6578, 0.995, 0.6043, 0.0126, 0.0002, 0.8813, 0.282, 0.2005, 0.1038, 0.8483, 0.8658, 0.3477, 0.1533, 0.932, 0.587, 0.429, 0.6117, 0.4081, 0.1146, 0.6733, 0.0744, 0.2101, 0.1241, 0.579, 0.288, 0.9026, 0.6511, 0.7296, 0.525, 0.947, 0.7104, 0.0514, 0.5932, 0.9365, 0.7803, 0.6944, 0.0741, 0.9541, 0.9418, 0.9388, 0.007, 0.1486, 0.4436, 0.1014, 0.6893, 0.5421, 0.8402, 0.4815, 0.4313, 0.8297, 0.8489, 0.6856, 0.8585, 0.5657, 0.2228, 0.5935, 0.345],
        t::Vector{Float64} = [2.72584, 2.6429, 2.60176, 2.7067, 2.76324],
        )
        g=interpolation(m,s)
        return sum(g.(t))
    end
    function zadanie41(;
        m::Vector{Float64} = [2.4, 2.4018, 2.4036, 2.4054, 2.4072, 2.409, 2.4108, 2.4126, 2.4144, 2.4162, 2.418, 2.4198, 2.4216, 2.4234, 2.4252, 2.427, 2.4288, 2.4306, 2.4324, 2.4342, 2.436, 2.4378, 2.4396, 2.4414, 2.4432, 2.445, 2.4468, 2.4486, 2.4504, 2.4522, 2.454, 2.4558, 2.4576, 2.4594, 2.4612, 2.463, 2.4648, 2.4666, 2.4684, 2.4702, 2.472, 2.4738, 2.4756, 2.4774, 2.4792, 2.481, 2.4828, 2.4846, 2.4864, 2.4882, 2.49, 2.4918, 2.4936, 2.4954, 2.4972, 2.499, 2.5008, 2.5026, 2.5044, 2.5062, 2.508, 2.5098],
        s::Vector{Float64} = [0.2531, 0.8671, 0.7339, 0.5102, 0.8119, 0.1189, 0.0953, 0.8031, 0.2624, 0.3856, 0.7574, 0.0559, 0.7961, 0.4491, 0.1508, 0.1643, 0.2071, 0.1972, 0.4006, 0.5612, 0.9384, 0.5198, 0.2259, 0.3498, 0.2526, 0.0228, 0.8111, 0.3775, 0.8408, 0.508, 0.2774, 0.4158, 0.1302, 0.2676, 0.3638, 0.8088, 0.3008, 0.526, 0.9546, 0.9271, 0.2854, 0.1894, 0.4125, 0.0686, 0.2969, 0.4424, 0.1623, 0.8616, 0.0808, 0.9246, 0.6762, 0.7348, 0.2249, 0.753, 0.1059, 0.9506, 0.4425, 0.5648, 0.0485, 0.9759, 0.8877, 0.9202],
        t::Vector{Float64} = [2.41404, 2.46984, 2.40594, 2.49, 2.40288, 2.43384, 2.47218, 2.4333, 2.45796, 2.46516, 2.42556, 2.42106, 2.46318],
        )   
        g=interpolation(m,s)
        return sum(g.(t))
    end
    function zadanie42(;
            m::Vector{Float64} = [-2.5, -2.4978, -2.4956, -2.4934, -2.4912, -2.489, -2.4868, -2.4846, -2.4824, -2.4802, -2.478, -2.4758, -2.4736, -2.4714, -2.4692, -2.467, -2.4648, -2.4626, -2.4604, -2.4582, -2.456, -2.4538, -2.4516, -2.4494, -2.4472, -2.445, -2.4428, -2.4406, -2.4384, -2.4362, -2.434, -2.4318, -2.4296, -2.4274, -2.4252, -2.423, -2.4208, -2.4186, -2.4164, -2.4142, -2.412, -2.4098, -2.4076, -2.4054, -2.4032, -2.401, -2.3988, -2.3966, -2.3944, -2.3922, -2.39, -2.3878, -2.3856, -2.3834, -2.3812, -2.379, -2.3768, -2.3746, -2.3724, -2.3702, -2.368, -2.3658, -2.3636],
            s::Vector{Float64} = [0.3193, 0.4283, 0.9701, 0.4742, 0.9524, 0.4897, 0.7168, 0.1196, 0.3556, 0.1328, 0.1308, 0.4275, 0.7339, 0.8676, 0.7759, 0.2424, 0.229, 0.2211, 0.4798, 0.9108, 0.1534, 0.6305, 0.8634, 0.785, 0.0447, 0.3178, 0.3706, 0.428, 0.9399, 0.0268, 0.0612, 0.5431, 0.1537, 0.6246, 0.3613, 0.0652, 0.3628, 0.6944, 0.8843, 0.2167, 0.0585, 0.6706, 0.2195, 0.0916, 0.2381, 0.1359, 0.6446, 0.3142, 0.7347, 0.5, 0.0941, 0.1593, 0.0734, 0.8019, 0.2647, 0.286, 0.7124, 0.252, 0.2072, 0.0289, 0.5829, 0.3878, 0.3238],
            t::Vector{Float64} = [-2.48834, -2.49428, -2.42146, -2.45512, -2.41442, -2.42542, -2.49648, -2.38164, -2.4571, -2.41178, -2.40386, -2.47778, -2.48614, -2.37944, -2.48856, -2.39858],
        )
        g=interpolation(m,s)
        return sum(g.(t))
    end
    function zadanie45(;
        m::Vector{Float64} = [2.8, 2.8012, 2.8024, 2.8036, 2.8048, 2.806, 2.8072, 2.8084, 2.8096, 2.8108, 2.812, 2.8132, 2.8144, 2.8156, 2.8168, 2.818, 2.8192, 2.8204, 2.8216, 2.8228, 2.824, 2.8252, 2.8264, 2.8276, 2.8288, 2.83, 2.8312, 2.8324, 2.8336, 2.8348, 2.836, 2.8372, 2.8384, 2.8396, 2.8408, 2.842, 2.8432, 2.8444, 2.8456, 2.8468, 2.848, 2.8492, 2.8504, 2.8516, 2.8528, 2.854, 2.8552, 2.8564, 2.8576, 2.8588, 2.86, 2.8612, 2.8624, 2.8636, 2.8648, 2.866, 2.8672, 2.8684, 2.8696, 2.8708, 2.872, 2.8732, 2.8744],
        s::Vector{Float64} = [0.9497, 0.2971, 0.2145, 0.208, 0.5016, 0.1713, 0.2711, 0.6311, 0.2628, 0.3889, 0.9762, 0.0481, 0.6762, 0.8681, 0.621, 0.1858, 0.1883, 0.0697, 0.4655, 0.6819, 0.9181, 0.8439, 0.6959, 0.1542, 0.8659, 0.2748, 0.5479, 0.3468, 0.779, 0.5308, 0.5996, 0.5841, 0.0554, 0.4721, 0.2465, 0.183, 0.4147, 0.6782, 0.6847, 0.0179, 0.9586, 0.192, 0.3378, 0.8239, 0.2247, 0.3385, 0.29, 0.268, 0.4316, 0.3393, 0.8081, 0.8112, 0.683, 0.0122, 0.2332, 0.5209, 0.5689, 0.9551, 0.032, 0.0505, 0.5144, 0.6967, 0.2187],
        t::Vector{Float64} = [2.854, 2.85796, 2.8078, 2.86216, 2.84788, 2.83636, 2.86012, 2.8654, 2.86564, 2.80264, 2.81608, 2.85376, 2.85592],
        )
        g=interpolation(m,s)
        return sum(g.(t))
    end
    function zadanie48(;
        m::Vector{Float64} = [-3.6, -3.5988, -3.5976, -3.5964, -3.5952, -3.594, -3.5928, -3.5916, -3.5904, -3.5892, -3.588, -3.5868, -3.5856, -3.5844, -3.5832, -3.582, -3.5808, -3.5796, -3.5784, -3.5772, -3.576, -3.5748, -3.5736, -3.5724, -3.5712, -3.57, -3.5688, -3.5676, -3.5664, -3.5652, -3.564, -3.5628, -3.5616, -3.5604, -3.5592, -3.558, -3.5568, -3.5556, -3.5544, -3.5532, -3.552, -3.5508, -3.5496, -3.5484, -3.5472, -3.546, -3.5448, -3.5436, -3.5424, -3.5412, -3.54, -3.5388, -3.5376, -3.5364, -3.5352, -3.534, -3.5328, -3.5316, -3.5304, -3.5292, -3.528, -3.5268, -3.5256, -3.5244, -3.5232, -3.522, -3.5208, -3.5196, -3.5184, -3.5172, -3.516, -3.5148, -3.5136, -3.5124, -3.5112, -3.51],
        s::Vector{Float64} = [0.0505, 0.7695, 0.3746, 0.6549, 0.9908, 0.9809, 0.4977, 0.6667, 0.3932, 0.3193, 0.1672, 0.5497, 0.7739, 0.9456, 0.6383, 0.7276, 0.0929, 0.4703, 0.154, 0.3115, 0.8668, 0.4878, 0.6032, 0.9816, 0.8717, 0.0921, 0.2711, 0.2627, 0.031, 0.3285, 0.5916, 0.016, 0.0518, 0.8732, 0.9307, 0.2532, 0.2329, 0.1193, 0.7109, 0.0299, 0.9112, 0.5735, 0.4754, 0.5269, 0.4506, 0.2147, 0.8181, 0.5677, 0.3427, 0.1733, 0.759, 0.8697, 0.0194, 0.8267, 0.7927, 0.7732, 0.5584, 0.0162, 0.6887, 0.5512, 0.6274, 0.676, 0.7326, 0.2567, 0.0482, 0.5576, 0.7071, 0.8827, 0.5136, 0.9067, 0.3366, 0.5503, 0.291, 0.9621, 0.7864, 0.5585],
        t::Vector{Float64} = [-3.56508, -3.57108, -3.57672, -3.51576, -3.5508, -3.59832],
        )
        g=interpolation(m,s)
        return sum(g.(t))
    end
    function zadanie49(;
        m::Vector{Float64} = [-2.6, -2.5987, -2.5974, -2.5961, -2.5948, -2.5935, -2.5922, -2.5909, -2.5896, -2.5883, -2.587, -2.5857, -2.5844, -2.5831, -2.5818, -2.5805, -2.5792, -2.5779, -2.5766, -2.5753, -2.574, -2.5727, -2.5714, -2.5701, -2.5688, -2.5675, -2.5662, -2.5649, -2.5636, -2.5623, -2.561, -2.5597, -2.5584, -2.5571, -2.5558, -2.5545, -2.5532, -2.5519, -2.5506, -2.5493, -2.548, -2.5467, -2.5454, -2.5441, -2.5428, -2.5415, -2.5402, -2.5389, -2.5376, -2.5363, -2.535, -2.5337, -2.5324, -2.5311, -2.5298, -2.5285, -2.5272, -2.5259, -2.5246, -2.5233, -2.522, -2.5207, -2.5194, -2.5181, -2.5168, -2.5155, -2.5142, -2.5129, -2.5116, -2.5103, -2.509, -2.5077, -2.5064, -2.5051, -2.5038, -2.5025, -2.5012, -2.4999, -2.4986, -2.4973, -2.496, -2.4947, -2.4934, -2.4921, -2.4908, -2.4895, -2.4882, -2.4869, -2.4856, -2.4843, -2.483, -2.4817, -2.4804, -2.4791, -2.4778, -2.4765],
        s::Vector{Float64} = [0.491, 0.1944, 0.3941, 0.8624, 0.54, 0.1734, 0.3269, 0.1411, 0.5187, 0.8317, 0.6221, 0.2919, 0.5521, 0.6599, 0.2909, 0.3712, 0.5702, 0.7875, 0.585, 0.3627, 0.9779, 0.5607, 0.7523, 0.9707, 0.4682, 0.6746, 0.3705, 0.2107, 0.722, 0.0336, 0.7825, 0.5798, 0.0108, 0.1204, 0.1874, 0.886, 0.7085, 0.5608, 0.3913, 0.2905, 0.0068, 0.5946, 0.9398, 0.1887, 0.9465, 0.158, 0.2396, 0.2258, 0.0598, 0.408, 0.271, 0.4539, 0.6366, 0.9487, 0.1012, 0.4039, 0.1965, 0.3239, 0.5367, 0.9994, 0.6386, 0.2416, 0.6488, 0.3456, 0.1822, 0.9242, 0.6954, 0.3406, 0.2088, 0.7046, 0.2673, 0.0091, 0.4935, 0.8387, 0.3639, 0.7969, 0.1629, 0.0933, 0.3381, 0.069, 0.9252, 0.0655, 0.7533, 0.7793, 0.1977, 0.3327, 0.9095, 0.414, 0.38, 0.9997, 0.6858, 0.5491, 0.5842, 0.877, 0.9064, 0.1911],
        t::Vector{Float64} = [-2.57595, -2.5402, -2.57257, -2.522, -2.5311, -2.47858, -2.54852, -2.56542, -2.5064, -2.51654, -2.53097, -2.49704, -2.57751, -2.52343],
        )
        g=interpolation(m,s)
        return sum(g.(t))
    end
    #sploty 
    function zadanie9(;
        x::Vector{Float64} = [-3.13, 0.21, -0.38, 2.88, 3.52, 4.82, -1.36, 1.78, 4.91, 0.32, -3.82, -3.69, -1.3, -3.25, 3.14, 2.7, -0.45, -1.48, 4.24, -3.02, -2.76, 3.61, 4.89, 1.96, 3.57, 0.71, -0.99, 0.51, 1.24, -0.01, -4.88, -4.58, 1.61, -3.2, 1.68, -4.35, 1.15, -0.73, -3.12, -1.26, -4.01, -0.14, -0.46, 1.17, 2.09, -2.2, 1.7, 3.11, -1.87, -0.75, 1.4, 1.4, 0.01, 0.55, -1.21, 0.35, 0.12, 0.42, 4.8, -4.44, 3.27, -0.6, -1.63, 3.81],
        h::Vector{Float64} = [3.75, -0.41, -2.15, -0.71, -0.41, 3.45, 3.61, -2.06, -3.83, 0.2, 1.07, 1.45, -0.27, -2.56, 1.72, 3.0, 4.16, 1.46, 4.76, 0.61, 4.5, 1.19, -3.78],
        )
        y=conv(x,h)
        return rms(y)
    end
    function zadanie43(;
        x::Vector{Float64} = [2.3, 4.44, 2.78, -0.33, 0.15, -1.73, -4.14, -1.83, 0.43, 0.03, 4.43, -1.78, -2.94, -0.43, -4.91, 2.93, 4.94, -0.65, -2.3, -3.27, 3.3, -0.29, 1.53, -3.33, -1.47, -4.56, 3.57, 0.86, -3.69, -2.64, -4.29, -2.4, -1.21, 0.72, -1.04, -0.58, -4.71, 4.76, -0.51, -4.85, 1.08, -2.02, -3.22, 2.15, -1.46, -0.48, 2.26, -4.26, 3.41, -2.22, -3.28, -0.6, -2.55, 3.39, 1.01, 3.87, 1.16, -2.24, -1.35, -1.35, 1.7, -4.45],
        h::Vector{Float64} = [0.85, -1.46, -0.28, 0.33, 1.87, 3.79, 2.53, 4.69, 3.03, 4.8, -1.64, -4.35, -2.39, -0.94, -4.79, 2.02, 0.23, 3.56, -0.42],
        )
        y=conv(x,h)
        return power(y)
    end
    function zadanie39(;
        x::Vector{Float64} = [0.64, -2.88, 2.72, -3.81, -0.23, -0.79, 2.51, -3.96, -2.15, -4.77, -1.27, 0.17, 4.68, -3.5, -0.1, 3.19, 0.26, -1.06, -0.7, 1.59, 0.82, 3.63, -3.78, -4.16, -0.23, 1.55, 1.56, -0.7, 1.7, -4.86, -1.22, 3.76, 4.85, 2.23, -1.43, 0.17, 1.14, 0.25, -0.04, 0.88, 4.06, 4.58, -0.96, 0.69, 0.86, 1.78, 0.85, -1.24, 0.61, -2.79, -0.4, -2.73, -1.96, -4.09, -2.7, 3.46, 4.38, -2.62, 2.18, 1.04, -1.52, 1.94, 0.45],
        h::Vector{Float64} = [-0.59, -1.0, 2.35, 3.62, 4.66, 4.69, -1.01, 2.05, -1.0, -1.11, -2.13, 4.41, -2.77, -1.04, -3.25, -0.13],
        )
        y=conv(x,h)
        return energy(y)
    end
    function zadanie28(;
        x::Vector{Float64} = [-0.13, 1.11, -3.66, 0.23, -0.53, 2.05, -3.07, -0.05, -4.0, 0.09, 4.04, 2.8, 0.29, -1.62, -3.94, 0.77, 4.08, 0.15, -4.02, -4.45, 4.15, 1.05, -3.71, -4.94, 4.8, -0.78, 0.76, -3.04, -0.26, -2.24, 0.33, 3.94, 4.18, 4.1, 1.91, 3.26, -3.88, -2.77, -1.83, -1.7, -1.7, -4.94, 2.68, -4.34, -0.44, 4.11, -2.49, 2.69, 4.64, -1.3, 2.78, -3.24, -2.1, 4.95, -3.16, -1.93, 3.3, 1.24, 4.6, -1.48, 0.01, 1.62],
        h::Vector{Float64} = [1.77, -2.69, 4.24, 4.68, 0.34, 4.58, 1.46, -3.54, 4.34, -3.33, -2.63, -1.68, -3.58, -2.48, 4.04, 2.9, 4.67, -3.02, 2.19, -2.74, -4.17, -3.34],
        )   
        y=conv(x,h)
        return mean(y)
    end
    function zadanie29(;
        x::Vector{Float64} = [3.62, -2.0, -0.06, -3.17, -2.66, -0.26, -3.97, 3.92, 3.11, 0.23, -0.57, 4.59, 2.44, -1.66, -2.15, 4.54, 0.49, -4.14, 0.98, 3.68, 0.43, 4.36, -4.25, 0.4, 0.54, 4.21, -0.52, -2.29, 2.08, -3.47, 4.65, -3.48, 2.52, -2.1, -0.67, 1.79, 4.91, -3.18, 0.57, -3.17, 3.43, -2.31, 0.71, -2.48, 4.18, -1.23, 3.56, 3.48, 4.62, 4.94, 0.53, 1.07, 0.76, 1.78, 0.05, -3.56, 3.82, 2.7, 0.52, 3.8, 2.14, -2.81, -1.45, -1.49],
        h::Vector{Float64} = [-3.92, -0.29, -1.82, -0.82, -0.64, 2.01, 3.94, 1.54, -2.66, -2.66, -2.85, -0.69, 0.93, 0.34, -4.5],
        )
        y=conv(x,h)
        return mean(y)
    end
    function zadanie46(;
        x::Vector{Float64} = [-2.66, 0.0, -1.62, 3.19, 5.0, 4.3, -0.97, -4.16, -0.07, 3.14, -3.77, -3.6, 0.29, -4.45, 3.73, 3.57, -3.77, -3.15, -1.0, 3.35, 2.93, 2.38, 4.89, -2.85, 3.22, 1.4, 3.77, -1.73, -1.51, -1.53, -3.36, -2.71, 4.31, -4.77, -3.19, -3.77, 4.29, -1.8, 1.3, 3.16, 1.32, 4.04, -2.7, -0.06, 2.66, 3.15, 0.14, -1.09, 3.68, 4.12, -3.34, -4.24, -3.28, -1.83, 4.79, -4.15, 4.04, 0.33, -4.02, -0.93, -3.13],
        h::Vector{Float64} = [0.4, -0.35, -0.3, 0.18, 1.8, 4.11, 3.26, 1.69, 1.16, -2.37, -4.75],
        )
        y=conv(x,h)
        return rms(y)
    end
    #fourier 

    function zadanie13(;
        fp::Int = 476,
        x::Vector{ComplexF64} = ComplexF64[-0.28 + 0.56im, 0.26 + 1.12im, -0.3 + 0.3im, -0.01 + 0.62im, -0.48 - 0.13im, -0.4 + 1.11im, 0.3 + 0.09im, -0.76 - 0.09im, -0.01 + 0.73im, 0.42 + 0.49im, -0.33 + 0.09im, 0.99 - 0.1im, -0.74 + 0.01im, -0.3 - 0.35im, 0.3 + 0.57im, -0.01 + 0.68im, -1.52 + 0.89im, 0.03 + 1.25im, -0.71 + 0.43im, 0.33 + 0.55im, 0.42 + 0.83im, 1.22 - 0.34im, -0.35 - 0.57im, 1.43 - 0.58im, -0.17 + 0.85im, 0.85 - 0.94im, -0.64 + 1.03im, 0.04 - 0.22im],
        f::Vector{Int} = [-102, -68, -34, -17, 102, 136, 153],
        )
        X=dft(x)
        A=[abs(X[freq2index(freq,length(x),fp)])/length(X) for freq in f]
        return sum(A)
    end
    function zadanie15(;
        fp::Int = 713,
        x::Vector{ComplexF64} = ComplexF64[-0.57 - 1.42im, -0.72 + 1.33im, -0.2 - 1.11im, -1.27 - 1.22im, -1.2 - 0.32im, 0.35 + 0.69im, -0.19 - 0.9im, 0.36 + 0.84im, -0.06 - 0.51im, 1.12 + 0.09im, 0.92 + 0.15im, -0.36 + 0.17im, 0.11 - 0.77im, -0.49 - 0.49im, -1.84 + 0.06im, -0.97 - 0.91im, 0.71 + 0.05im, 0.67 + 0.42im, -0.23 + 0.03im, -0.73 + 0.94im, -0.24 + 0.07im, -0.25 + 0.56im, 0.2 - 0.01im, 1.24 - 0.71im, -0.87 - 0.08im, 0.65 + 0.18im, 0.16 + 1.1im, 0.01 - 0.43im, 0.25 + 0.27im, 0.49 - 0.15im, 0.37 - 0.94im],
        f::Vector{Int} = [-207, -115, -23, 0, 69, 253],
        )
        X=dft(x)
        P=[angle(X[freq2index(freq,length(x),fp)])/length(X) for freq in f]
        return sum(P)
    end
    function zadanie25(;
        fp::Int = 943,
        x::Vector{ComplexF64} = ComplexF64[0.4 - 0.32im, 0.31 + 0.45im, 1.35 - 0.46im, -0.3 - 0.46im, 0.6 - 0.28im, -0.05 + 0.08im, -0.47 + 0.35im, 1.29 - 0.16im, -1.09 + 0.93im, 0.41 - 0.9im, -0.69 - 0.46im, -0.61 - 0.55im, 0.09 - 1.79im, -0.39 - 1.93im, 0.84 + 0.25im, -0.55 + 0.8im, 0.11 + 1.47im, 0.49 - 0.04im, 1.27 + 0.78im, -0.67 - 1.43im, 1.56 + 0.61im, -0.04 - 0.41im, -0.09 - 0.04im, 0.91 + 0.23im, 0.63 + 0.49im, 0.5 - 0.1im, 0.02 - 0.22im, -0.6 - 0.77im, 0.3 + 0.42im, -0.4 - 0.02im, 0.65 - 0.57im, 0.22 + 0.98im, -0.42 - 1.81im, -0.21 + 0.24im, -0.79 + 0.86im, -0.15 - 0.33im, -0.73 + 0.1im, -0.21 + 0.44im, -0.48 - 0.7im, 0.25 - 1.73im, -0.08 + 0.68im],
        f::Vector{Int} = [-460, -276, -230, 46, 322],
        )
        X=dft(x)
        A=[abs(X[freq2index(freq,length(x),fp)])/length(X) for freq in f]
        return sum(A)
    end

    #printowanie rozwiazan (obok)
    println("rozwiązanie filtrów")
    out1 = zadanie1()
    println("zadanie 1: ", out1) #0.06181728496969079 
    out18 = zadanie18()
    println("zadanie 18 ", out18) #0.006039123315957948
    out33 = zadanie33()
    println("zadanie 33: ",out33) #0.023380779440447374
    out44 = zadanie44()
    println("zadanie 44: ",out44) #-0.006724205309096825
    out50 = zadanie50()
    println("zadanie 50: ",out50) #-0.02266955386765545
    println("rozw kwantyzacji")
    out2=zadanie2()
    println("zadanie2: ",out2) #0.0005527368564013786
    out5=zadanie5()
    println("zadanie 5: ",out5) #2.3948514257405033e-5
    out6=zadanie6()
    println("zadanie 6: ",out6) #1.4608983660130696e-6
    out16=zadanie16()
    println("zadanie 16: ",out16) #0.025719134569676363
    out17=zadanie17()
    println("zadanie 17: ",out17) #2.7944721371786792e-8
    out22=zadanie22()
    println("zadanie 22: ",out22) #0.045765219407223404
    out47=zadanie47()
    println("zadanie 47: ",out47) #13.629894145679595
    println("rozwiązania LTI")
    out12=zadanie12()
    println("zadanie 12: ",out12) #0.0448068128414413
    out23=zadanie23()
    println("zadanie 23: ", out23) #0.2908694539833204
    out34=zadanie34()
    println("zadanie 34: ",out34) #0.13157219368214537
    out51=zadanie51()
    println("zadanie 51: ",out51) #4.964239705749917
    out52=zadanie52()
    println("zadanie 52: ",out52) #2.4552059372704895
    out54=zadanie54()
    println("zadanie54: ",out54) #0.6610830060692098
    out11=zadanie11()
    println("zadanie 11: ",out11) #-0.6271160127177362
    out53=zadanie53()
    println("zadanie 53: ",out53) #0.9999999999999987
    out26=zadanie26()
    println("zadanie 26: ",out26) #1.7612003370227656
    out36=zadanie36()
    println("zadanie 36: ",out36) #0.6173626121172344
    println("srednie sygnałów")
    out3=zadanie3()
    println("zadanie 3: ",out3) #-0.0737646162628117
    out4=zadanie4()
    println("zadanie 4: ",out4) #0.028
    out7=zadanie7()
    println("zadanie 7: ",out7) #-0.015562139622303298
    out8=zadanie8()
    println("zadanie 8: ",out8) #0.0025547646703272214
    out10=zadanie10()
    println("zadanie 10: ",out10) #-0.015279672578444745
    out24=zadanie24()
    println("zadanie 24: ", out24) #-0.0071599464256727995
    out31=zadanie31()
    println("zadanie 31: ",out31) #-0.012776068809512878
    out32=zadanie32()
    println("zadanie 32: ",out32) #-0.1066088323830473
    out40=zadanie40()
    println("zadanie 40: ",out40) #-0.00504493931131107
    println("stablinosc filtrow")
    out14=zadanie14()
    println("zadanie 14: ",out14) #-1 niestabilny 
    out19=zadanie19()
    println("zadanie 19: ",out19) #-1 niestabilny
    out20=zadanie20()
    println("zadanie 20: ",out20) #-1
    out21=zadanie21()
    println("zadanie 21: ",out21) #1
    out30=zadanie30()
    println("zadanie 30: ",out30) #-1
    out37=zadanie37()
    println("zadanie 37: ",out37) #1
    out55=zadanie55()
    println("zadanie 55: ",out55) #-1
    println("interpolacje")
    out27=zadanie27()
    println("zadanie 27: ",out27) #6.488218286317519
    out35=zadanie35()
    println("zadanie 35: ",out35) #7.836161594433505
    out38=zadanie38()
    println("zadanie 38: ",out38) #3.4810036861609217
    out41=zadanie41()
    println("zadanie 41: ",out41) #6.971440703103188
    out42=zadanie42()
    println("zadanie 42: ",out42) #6.635224264815659
    out45=zadanie45()
    println("zadanie 45: ",out45) #7.190099909471551
    out48=zadanie48()
    println("zadanie 48: ",out48) #3.4791550715036395
    out49=zadanie49()
    println("zadanie 49: ",out49) #7.642620553490431
    println("odpowiedzi do splotów")
    out9=zadanie9()
    println("zadanie 9: ",out9) #30.17822666195721
    out43=zadanie43()
    println("zadanie 43: ",out43) #735.094220581
    out39=zadanie39()
    println("zadanie 39: ",out39) #51040.51474921001
    out28=zadanie28()
    println("zadanie 28: ",out28) #-0.02494337349397532
    out29=zadanie29()
    println("zadanie 29: ",out29) #-5.742750000000002
    out46=zadanie46()
    println("zadanie 46: ",out46) #23.325237793302012
    println("transformaty fouriera")
    out13=zadanie13()
    println("zadanie 13: ",out13) #0.9225496857112367
    out15=zadanie15()
    println("zadanie 15: ",out15) #-0.25582617394677754
    out25=zadanie25()
    println("zadanie 25: ",out25) #0.6647400383729666
end